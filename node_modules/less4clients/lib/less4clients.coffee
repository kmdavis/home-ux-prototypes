# Requirements
less = require 'less-bal'
util = require 'bal-util'
fs = require 'fs'
path = require 'path'

# Less4Clients
class Less4Clients
	options:
		server: null
		publicPath: null
		missingAction: false
		cache: false
		compress: false
	cache: {}
	
	# Setup our instance
	constructor: (options) ->
		# Prepare
		options or= {}
		for own key, value of options
			if options[key]?
				@options[key] = options[key]
		
		# Route
		@options.server.get /\.less$/, @process

	# Process a request
	process: (req,res) =>
		# Fetch
		@fetch req,res, (result) ->
			# Send
			res.writeHead 200, 'content-type': 'text/css'
			res.write result
			res.end()
	
	# Fetch a request's data
	fetch: (req,res,next) ->
		# Check cache
		if @options.cache and @cache[req.url]?
			return next @cache[req.url]
		
		# Prepare sender
		send = (result) =>
			# Cache
			if @options.cache
				@cache[req.url] = result

			# Next
			return next result
	
		# Fetch
		fileFullPath = @options.publicPath+req.url.replace(/\?.*$/,'')
		util.resolvePath fileFullPath, @options.publicPath, (err,fileFullPath,fileRelativePath) =>
			# Error
			if err
				if @options.missingAction
					return @options.missingAction req, res
				else
					throw err

			# Read
			fs.readFile fileFullPath, (err,data) =>
				# Error
				if err
					if @options.missingAction
						return @options.missingAction req, res
					else
						throw err

				# Render
				if path.extname(fileFullPath) is '.less' and /\?css$/i.test(req.url)
					# Prepare
					options = 
						paths: [path.dirname(fileFullPath),@options.publicPath]
						optimization: 1

					# Compile
					new (less.Parser)(options).parse data.toString(), (err, tree) =>
						throw err if err
						send tree.toCSS(compress: if @options.compress then 1 else 0)
				else
					send data.toString()

# Export
module.exports = {
	createInstance: (options) ->
		return new Less4Clients(options)
}